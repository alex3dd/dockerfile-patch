#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Author: Asher256 <asher256@gmail.com>
# License: GPL
#
# This source code follows the PEP-8 style guide:
# https://www.python.org/dev/peps/pep-0008/
#
"""Command line interface you can use to patch.

dockerfile-patch: patch a Dockerfile.

dockerfile-patch will help you insert templatable instructions in a Dockerfile
after 'FROM', to build a patched version of a Dockerfile.

"""


import logging
import argparse
import signal
import os
import gc
import sys
import dockerfile_patch
from dockerfile_patch import dockerfile_patch as df_patch


assert sys.version_info >= (3, 3), "The Python version needs to be >= 3.3"


def parse_args():
    """Parse the arguments."""
    description = "Patch a Dockerfile with a Jinja2 template"
    usage = "%(prog)s [--option] [dockerfile_path]"
    parser = argparse.ArgumentParser(description=description,
                                     usage=usage)
    parser.add_argument('path', type=str, nargs='?', default=None,
                        help="The path where the 'Dockerfile' is located.")
    parser.add_argument('-o', '--output', default=None,
                        help='Save the patched Dockerfile to a file')
    parser.add_argument('-d', '--debug', action="store_true",
                        default=False, help='Show debug information')
    return parser.parse_args()


def main():
    """The program starts here."""
    args = parse_args()

    if args.debug:
        debug_level = logging.INFO
    else:
        debug_level = logging.ERROR

    logging.basicConfig(level=debug_level,
                        format='%(asctime)s %(message)s')

    # garbage collector
    def garbage_collector(signum, frame):
        """Garbage collection."""
        gc.collect()
        logging.debug("%s: Garbage collection done.", sys.argv[0])
        if signum == signal.SIGINT:
            sys.stderr.write("Interrupted.\n".format())
            sys.exit(1)
        else:
            sys.exit(0)

    signal.signal(signal.SIGINT, garbage_collector)
    signal.signal(signal.SIGTERM, garbage_collector)

    try:
        from pygments import highlight
        from pygments.lexers import DockerLexer
        from pygments.formatters import TerminalFormatter

        color_enabled = True if sys.stdout.isatty() else False
    except ModuleNotFoundError:
        color_enabled = False

    # default facts gatherer
    default_facts = os.path.join(os.path.dirname(dockerfile_patch.__file__),
                                 'data', 'default-facts.sh')

    # Default parameters
    if args.path:
        dockerfile_dir = args.path
    else:
        dockerfile_dir = '.'

    j2_template_path = os.path.join(dockerfile_dir, 'dockerfile-patch.j2')

    # launch the pbuild script
    output = df_patch(dockerfile_dir=dockerfile_dir,
                      j2_template_path=j2_template_path,
                      fact_scripts_paths=[default_facts])

    if args.output:
        with open(args.output, 'w') as fhandler:
            fhandler.write(output)
    else:
        logging.info('[MAIN] The patched version of the Dockerfile:')
        logging.info('=============================================')

        if color_enabled:
            print(highlight(output, DockerLexer(), TerminalFormatter()))
        else:
            print(output)

    sys.exit(0)


if __name__ == '__main__':
    main()


# vim:ai:et:sw=4:ts=4:sts=4:tw=78:fenc=utf-8
